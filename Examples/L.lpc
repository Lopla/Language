
function L.Replacement(r, rules){
    i = 0
    while(i<Lp.Len(rules)){
        a = rules[i]
        b = a[0]
        if(r == b[0]){
            return a[1]
        }
        i=i+1
    }

    result = "-"
    result[0] = r
    return result
}

function L.Iterate(axiom, rules){
    a = axiom
    result=""
    
    i=0
    while(i < Lp.Len(axiom)){
        r = L.Replacement(axiom[i], rules)
        result = result + r
        i=i+1
    }
    
    return result
}

function L.Do(axiom, rules, iter){
    i = 0
    while(i < iter){
        axiom = L.Iterate(axiom, rules)
        i = i + 1
    }
    return axiom
}
